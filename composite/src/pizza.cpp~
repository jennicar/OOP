#include "Pizza.h"
#include <algorithm>
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

Pizza::Pizza() : size(L), sauce(TOMATO), numOfToppings(2), marker(false) { }

void Pizza::setSize(Size _size){ this->size = _size; }
Size Pizza::getSize(){ return this->size; }

void Pizza::setSauce(Sauce _sauce){ this->sauce = _sauce; }
Sauce Pizza::getSauce(){ return this->sauce; }

void Pizza::setNumOfToppings(int _numOfToppings){
  if ((_numOfToppings > -1) && (_numOfToppings <= 5)) this->numOfToppings = _numOfToppings;
  else throw("Five toppings is the max.");
}
int Pizza::getNumOfToppings(){ return this->numOfToppings; }

void Pizza::setPizzaOrders(vector<Pizza> _pizzaOrders){ this->pizzaOrders = _pizzaOrders; }
vector<Pizza> Pizza::getPizzaOrders(){ return this->pizzaOrders; }

void Pizza::add(Pizza pizza){ this->pizzaOrders.push_back(pizza); }
int Pizza::arraySize(){ return this->pizzaOrders.size(); }
void Pizza::printOrders(Pizza pizza){
  for(auto it = pizza->
}

/*void Pizza::remove(Pizza pizza){
  this->markedForDeletion(true);
  vector<Pizza> array = this->pizzaOrders;
  int check = this->marker;
  if (check == 1){
    try{
      array.erase(remove(array.begin(), array.end(), pizza), array.end());
    } catch (...) { cout << "!!! error at markedForDeletion()\n"; }
  }
  }*/

/*void Pizza::markedForDeletion(bool _marker){
  this->marker = _marker;*/
}
